enum Role {
  ADMIN
  MEMBER
  GUEST
}

enum Level {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum Language {
  ENGLISH
  SPANISH
}

enum Game {
  AUDIO
  TYPE_WORD
  SELECT_WORD
  SELECT_DEF
}

type User {
  email: String!
  firstName: String!
  lastName: String!
  createdAt: String!
  id: ID!
  role: Role!
  primaryLanguage: String
}

type DefExample {
  text: String!
  translation: String
}

type WordDefinition {
  def: String!
  examples: [DefExample]
}

type WordTag {
  color: String!
  text: String!
}

type WordStatistics {
  lastTimePracticed: String
  practicedTimes: Int
  answeredCorrectly: Int
  errorsCount: Int
}

type Word {
  id: ID!
  uuid: ID
  name: String!
  createdAt: String!
  defs: [WordDefinition]!
  particle: String!
  imgUrl: String
  imgDesc: String
  audioUrl: String
  additionalInfo: String
  transcription: String
  user: ID!
  isOffensive: Boolean
  stems: [String]
  tags: [WordTag]
  level: Level
  shortDef: [String]!
  language: Language!
  statistics: WordStatistics
}

type DictionaryWord {
  uuid: ID!
  name: String!
  defs: [WordDefinition]!
  particle: String!
  imgUrl: String
  imgDesc: String
  audioUrl: String
  additionalInfo: String
  transcription: String
  isOffensive: Boolean
  stems: [String]
  shortDef: [String]!
  language: Language!
}

type AuthUser {
  email: String!
  firstName: String!
  lastName: String!
  createdAt: String!
  id: ID!
  role: Role!
  token: String!
}

type Suggestions {
  suggestions: [String]
}

union SearchResult = DictionaryWord | Suggestions

type GameConfig {
  name: String!
  desc: String!
  imgUrl: String!
  id: String!
  type: Game!
  wordsPerGame: Int!
  optionsPerGame: Int!
}

type GameQuestion {
  question: [String!]
  options: [String]
  answer: String!
  wordId: ID!
}

type GameData {
  type: Game!
  task: String!
  questions: [GameQuestion!]
}

input DefExampleInput {
  text: String!
  translation: String
}

input DefsInput {
  def: String!
  examples: [DefExampleInput]
}

input WordTagInput {
  color: String!
  text: String!
}

input NewWordInput {
  uuid: ID
  name: String!
  defs: [DefsInput]!
  particle: String!
  imgUrl: String
  imgDesc: String
  audioUrl: String
  additionalInfo: String
  transcription: String
  isOffensive: Boolean
  stems: [String]
  level: Level
  tags: [WordTagInput]
  language: Language!
  shortDef: [String]!
}

input UpdateWordInput {
  id: ID!
  defs: [DefsInput]
  particle: String
  imgUrl: String
  imgDesc: String
  audioUrl: String
  additionalInfo: String
  transcription: String
  isOffensive: Boolean
  stems: [String]
  level: Level
  tags: [WordTagInput]
  shortDef: [String]
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  primaryLanguage: String
}

input LoginInput {
  email: String!
  password: String!
}

input WordSearchInput {
  search: String!
  language: Language
}

input GameDataInput {
  gameType: Game!
  language: Language
}

input WordStatisticsInput {
  lastTimePracticed: String
  practicedTimes: Int
  answeredCorrectly: Int
  errorsCount: Int
}

input UpdateStatisticsInput {
  id: ID!
  statistics: WordStatisticsInput
}

type Query {
  user: User!
  games: [GameConfig]!
  game(input: GameDataInput!): GameData!
  words(language: Language): [Word]!
  word(id: ID!): Word!
  searchWord(input: WordSearchInput!): [SearchResult]!
}

type Mutation {
  saveWord(input: NewWordInput!): Word!
  updateWord(input: UpdateWordInput!): Word!
  saveGameResult(input: [UpdateStatisticsInput!]): String!
  deleteWord(id: ID!): String!
  signUp(input: SignUpInput!): AuthUser!
  login(input: LoginInput!): AuthUser!
}
